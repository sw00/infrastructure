---
# restore owncloud backups from s3
- name: fetch the db backup files from s3
  s3:
    object: "/backups/{{ DB_BACKUP_FILE }}"
    dest: "{{ HOST_BACKUP_DIR }}/{{ DB_BACKUP_FILE }}"
    bucket: rigmarolesoup
    region: eu-west-1
    mode: get
    access_key: "{{ lookup('env', 'AWS_ACCESS_KEY') }}"
    secret_key: "{{ lookup('env', 'AWS_SECRET_KEY') }}"

- name: fetch the data backup files from s3
  s3:
    object: "/backups/{{ DATA_BACKUP_FILE }}"
    dest: "{{ HOST_BACKUP_DIR }}/{{ DATA_BACKUP_FILE }}"
    bucket: rigmarolesoup
    region: eu-west-1
    mode: get
    access_key: "{{ lookup('env', 'AWS_ACCESS_KEY') }}"
    secret_key: "{{ lookup('env', 'AWS_SECRET_KEY') }}"

- name: ensure postgres is started
  docker_container:
    name: postgres
    state: started

- name: restore postgres
  docker_container:
    name: restore-postgres
    image: postgres
    entrypoint: pg_restore
    command: ["-c", "-d", "owncloud", "-h", "db", "-U", "postgres", "/backup/{{ DB_BACKUP_FILE }}"]
    detach: no
    volumes_from: postgres-data
    volumes:
      - "{{ HOST_BACKUP_DIR }}:/backup"
    links:
      - postgres:db

- name: stop the owncloud container
  docker_container:
    name: owncloud
    state: stopped

- name: restore owncloud data
  docker_container:
    name: restore-owncloud
    image: owncloud
    entrypoint: /bin/tar
    command: ["xvf", "/backup/{{ DATA_BACKUP_FILE }}", "-C", "/"]
    detach: no
    volumes_from: owncloud-data
    volumes:
      - "{{ HOST_BACKUP_DIR }}:/backup"

- name: start the owncloud container
  docker_container:
    name: owncloud
    state: started

- name: cleanup containers
  docker_container:
    name: "{{ item }}"
    state: absent
  with_items:
    - restore-owncloud
    - restore-postgres

- name: cleanup backup files
  file:
    path: "{{ HOST_BACKUP_DIR }}/{{ item }}"
    state: absent
  with_items:
    - "{{ DATA_BACKUP_FILE }}"
    - "{{ DB_BACKUP_FILE }}"
