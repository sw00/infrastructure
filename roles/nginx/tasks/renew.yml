- name: collect domains
  set_fact:
    certbot_domains: "{% set certbot_domains = certbot_domains|default([]) + ['--domain', item.DOMAIN] %}{{ certbot_domains|list }}"
  with_items: "{{ UPSTREAM_APPS }}"

- name: define certbot arguments
  set_fact:
    certbot_cmd: "{{ ['certonly', '--server', 'https://acme-staging.api.letsencrypt.org/directory'] if not PRODUCTION else ['certonly'] }}"
    certbot_args: "{{ ['--authenticator', 'webroot', '--email', '{{ EMAIL_ADDRESS }}', '--agree-tos'] }}"

- name: backup letsencrypt data
  when: RENEW
  shell: tar cvf /var/backups/letsencrypt/letsencrypt_{{ ansible_date_time.date }}.tgz

- name: delete old certs and config
  when: RENEW
  file: path={{ item }} state=absent
  with_items:
    - /var/data/letsencrypt/live
    - /var/data/letsencrypt/renewal

- name: get new certs
  docker_container:
    name: letsencrypt
    image: quay.io/letsencrypt/letsencrypt:latest
    recreate: yes
    detach: no
    volumes_from:
      - letsencrypt-data
    entrypoint: certbot
    command: "{{ certbot_cmd + certbot_args + certbot_domains }}"

- name: template nginx conf files
  template: dest="/var/data/nginx/{{ item.DOMAIN }}.conf" src=nginx.conf.j2
  with_items: "{{ UPSTREAM_APPS }}"
  notify: reload nginx

- name: check if dhparams exists
  stat: path=/etc/letsencrypt/dhparams.pem
  register: dhparams_result

- name: generate dhparams
  docker_container:
    name: tmp-dhparams
    image: nginx
    recreate: yes
    entrypoint: openssl
    command: ["dhparam", "-out", "/etc/letsencrypt/dhparams.pem", "2048"]
    volumes_from:
      - letsencrypt-data
  when: not dhparams_result.stat.exists

- name: wait until dhparams created
  wait_for: path="/var/data/letsencrypt/live/{{ DOMAIN }}/dhparams.pem" state=present
  notify: reload nginx

