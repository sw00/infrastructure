---
- name: pull the docker images
  docker_image: name={{ item }} state=present
  with_items:
    - nginx:stable
    - quay.io/letsencrypt/letsencrypt

- name: create shared directories on host
  file: path={{ item }} state=directory
  with_items:
    - /var/data/letsencrypt
    - /var/data/nginx

- name: create the letsencrypt data container
  docker_container:
    name: letsencrypt-data
    image: quay.io/letsencrypt/letsencrypt
    recreate: yes
    volumes:
      - /var/data/letsencrypt:/etc/letsencrypt
      - /var/lib/letsencrypt
    entrypoint: /bin/mkdir
    command: ['-p', '/etc/letsencrypt/webrootauth/']
    detach: no

- name: create the nginx data container
  docker_container:
    name: nginx-data
    image: nginx
    volumes:
      - /var/data/nginx:/etc/nginx/conf.d
    entrypoint: /bin/true
    detach: no

- name: clear nginx conf directory
  file: path="{{ item }}" state=absent
  with_fileglob:
    - /var/data/nginx/*

- name: acme-challenge for our domains
  template: dest="/var/data/nginx/{{ item.DOMAIN }}.acme.conf" src=acme.conf.j2
  with_items:
    - "{{ UPSTREAM_APPS }}"

- name: start nginx
  docker_container:
    name: nginx
    image: nginx
    recreate: yes
    volumes_from:
      - nginx-data
      - letsencrypt-data
    links: "{{ UPSTREAM_APPS|map(attribute='CONTAINER_NAME')|list }}"
    ports:
      - 0.0.0.0:80:80
      - 0.0.0.0:443:443

- name: wait for nginx
  wait_for: port=80 timeout=10

- name: check if certificates already issued
  stat: path=/var/data/letsencrypt/live/{{ item.DOMAIN }}/cert.pem
  register: stat_certs
  with_items: "{{ UPSTREAM_APPS }}"

- name: renew certificates
  include: renew.yml
  with_items: "{{ stat_certs.results }}"
  when: not outer_item.stat.exists or RENEW
  loop_control:
    loop_var: outer_item

- name: check if dhparams exists
  stat: path=/var/data/letsencrypt/dhparams.pem
  register: dhparams_result

- name: generate dhparams
  docker_container:
    name: tmp-dhparams
    image: nginx
    recreate: yes
    detach: no
    entrypoint: openssl
    command: ["dhparam", "-out", "/etc/letsencrypt/dhparams.pem", "2048"]
    volumes_from:
      - letsencrypt-data
  when: not dhparams_result.stat.exists

- name: wait until dhparams created
  wait_for: path="/var/data/letsencrypt/dhparams.pem" state=present
  notify: reload nginx

